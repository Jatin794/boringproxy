version: '3.8'

services:
  boringproxy:
    # Build from source using the robust Dockerfile we created.
    build: .
    container_name: boringproxy
    restart: unless-stopped

    # The correct command for the binary your environment produces.
    command:
      - "server"
      - "-behind-proxy"
      - "-https-port"
      - "8100"
      - "-admin-domain"
      - "admin.tunnel.183816.xyz"
      - "-ssh-server-port" 
      - "8443"
      - "-db-dir"
      - "/data"

    ports:
      - '8443:8443'

    volumes:
      - boringproxy_data:/data

    # This connects the service to the network that Traefik is on.
    networks:
      - coolify_net
    
    labels:
      # --- Manual Traefik Labels ---
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"
      - "traefik.http.routers.boringproxy.rule=Host(`admin.tunnel.183816.xyz`)"
      - "traefik.http.routers.boringproxy.entrypoints=websecure"
      - "traefik.http.routers.boringproxy.tls.certresolver=letsencrypt"
      
      - "traefik.http.routers.boringproxy.service=boringproxy"
      - "traefik.http.routers.boringproxy.middlewares=boring-header@docker"

      # --- Middleware Definition ---
      # This creates a new middleware that sets the Host header for backend requests.
      # This ensures Traefik presents the correct SNI to boringproxy.
      - "traefik.http.middlewares.boring-header.headers.customRequestHeaders.Host=admin.tunnel.183816.xyz"

      # --- Service Configuration ---
      - "traefik.http.services.boringproxy.loadbalancer.server.port=8100"
      - "traefik.http.services.boringproxy.loadbalancer.server.scheme=https"
      - "traefik.http.services.boringproxy.loadbalancer.serverstransport=boring-transport@docker"

      # This tells the health check to use the same settings as a real request.
      - "traefik.http.services.boringproxy.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.boringproxy.loadbalancer.healthcheck.scheme=https"
      # This is the critical line that fixes the SNI mismatch for the health check.
      - "traefik.http.services.boringproxy.loadbalancer.healthcheck.headers.Host=admin.tunnel.183816.xyz"
      
      # --- ServersTransport Definition ---
      # This tells Traefik to trust the self-signed certificate from the boringproxy backend.
      - "traefik.http.serverstransports.boring-transport.insecureskipverify=true"
      
      # --- Coolify Management Labels ---
      - "coolify.managed=true"
      - "coolify.applicationId=3"
      - "coolify.type=application"
      - "coolify.resourceName=boringproxy-git"
      - "coolify.projectName=main"
      - "coolify.serviceName=boringproxy-git"
      - "coolify.environmentName=production"

volumes:
  boringproxy_data:

networks:
  # This section correctly defines 'coolify_net' as an alias for the
  # existing external network named 'coolify'.
  coolify_net:
    name: coolify
    external: true
